<!DOCTYPE html>
<html lang="en">
  <%- include('header') %>
  <body>
    <div class="container">
      <%- include('navbar') %>
      <div class="page-container">
        <h1 class="text-center mb-8 custom-h1">Transcribe YouTube Videos</h1>
        <div class="mb-8 input-container">
          <input
            id="urlInput"
            type="text"
            placeholder="Enter YouTube URL"
            class="input input-bordered w-full"
          />
          <button
          id="transcribeBtn"
          class="btn bg-[#6366f1] text-white w-full sm:w-auto flex items-center justify-center px-8 py-2"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-5 w-5 mr-2"
            fill="currentColor"
            viewBox="0 0 24 24"
            stroke="none"
          >
            <path
              d="m18.813,10c.309,0,.601-.143.79-.387s.255-.562.179-.861c-.311-1.217-.945-2.329-1.833-3.217l-3.485-3.485c-1.322-1.322-3.08-2.05-4.95-2.05h-4.515C2.243,0,0,2.243,0,5v14c0,2.757,2.243,5,5,5h3c.552,0,1-.448,1-1s-.448-1-1-1h-3c-1.654,0-3-1.346-3-3V5c0-1.654,1.346-3,3-3h4.515c.163,0,.325.008.485.023v4.977c0,1.654,1.346,3,3,3h5.813Zm-6.813-3V2.659c.379.218.732.488,1.05.806l3.485,3.485c.314.314.583.668.803,1.05h-4.338c-.551,0-1-.449-1-1Zm11.122,4.879c-1.134-1.134-3.11-1.134-4.243,0l-6.707,6.707c-.755.755-1.172,1.76-1.172,2.829v1.586c0,.552.448,1,1,1h1.586c1.069,0,2.073-.417,2.828-1.172l6.707-6.707c.567-.567.879-1.32.879-2.122s-.312-1.555-.878-2.121Zm-1.415,2.828l-6.708,6.707c-.377.378-.879.586-1.414.586h-.586v-.586c0-.534.208-1.036.586-1.414l6.708-6.707c.377-.378,1.036-.378,1.414,0,.189.188.293.439.293.707s-.104.518-.293.707Z"
            />
          </svg>
          <span id="buttonText">Transcribe</span>
        </button>
        
                   
        </div>
        <div id="results" class="hidden w-full">
          <div id="thumbnail" class="w-full">
            <img
              src=""
              alt="YouTube Video Thumbnail"
              class="w-full"
            />
          </div>
          <div class="text-center button-container">
            <button id="copyTranscriptionBtn" class="btn btn-secondary">
              Copy Transcript
            </button>
            <button id="downloadTxtBtn" class="btn btn-outline btn-secondary">
              Download TXT
            </button>
            <button id="downloadCsvBtn" class="btn btn-outline btn-secondary">
              Download CSV
            </button>
            <label for="summarize-modal" class="btn btn-primary">
              Summarize
            </label>
            <label for="repurpose-modal" class="btn btn-primary">
              Repurpose
            </label>
          </div>
          <div id="aiOutput" class="my-8 w-full hidden">
            <div class="bg-gray-100 p-4 rounded-lg w-full">
              <div class="flex justify-between items-start mb-4">
                <h3 id="aiOutputTitle" class="text-xl font-bold">AI Output</h3>
                <button id="copyAiOutputBtn" class="btn btn-ghost btn-sm">
                  <svg id="copyIcon" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                  </svg>
                  <svg id="checkIcon" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                  </svg>
                </button>
              </div>
              <div id="aiOutputBadges" class="flex flex-wrap gap-2 mb-4"></div>
              <div id="aiOutputContent" class="markdown-content w-full"></div>
            </div>
          </div>
          <h2 class="text-xl font-bold mb-4 py-2 vertical-center w-full">
            Video Transcript
          </h2>
          <div class="transcript-container w-full">
            <div id="transcription" class="w-full text-lg"></div>
          </div>
        </div>
      </div>
      <dialog id="language-modal" class="modal">
        <div class="modal-box">
          <form method="dialog">
            <button
              class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2"
              id="close-modal-btn"
            >
              âœ•
            </button>
          </form>
          <h3 class="font-bold text-lg">Select Language</h3>
          <div
            id="language-options"
            class="language-options flex flex-col items-stretch"
          ></div>
        </div>
      </dialog>
      
      <!-- Summarize Modal -->
      <input type="checkbox" id="summarize-modal" class="modal-toggle" />
      <div class="modal">
        <div class="modal-box">
          <h3 class="font-bold text-lg mb-4">Summarize Transcript</h3>
          <div class="form-control w-full">
            <label class="label">
              <span class="label-text">Length</span>
            </label>
            <select id="summaryLength" class="select select-bordered w-full">
              <option value="100">100 words</option>
              <option value="250">250 words</option>
              <option value="500">500 words</option>
            </select>
            
            <label class="label mt-4">
              <span class="label-text">Focus</span>
            </label>
            <input type="text" id="summaryFocus" placeholder="Enter focus area" class="input input-bordered w-full" />
            
            <button id="generateSummaryBtn" class="btn btn-primary mt-6">Generate Summary</button>
          </div>
          <div class="modal-action">
            <label for="summarize-modal" class="btn">Close</label>
          </div>
        </div>
      </div>
      
      <!-- Repurpose Modal -->
      <input type="checkbox" id="repurpose-modal" class="modal-toggle" />
      <div class="modal">
        <div class="modal-box">
          <h3 class="font-bold text-lg mb-4">Repurpose Transcript</h3>
          <div class="form-control w-full">
            <label class="label">
              <span class="label-text">Purpose</span>
            </label>
            <select id="repurposePurpose" class="select select-bordered w-full">
              <option value="tweet">Tweet/X Post (180 characters)</option>
              <option value="linkedin">LinkedIn Post (1000 characters)</option>
              <option value="blog">Blog Post (1000 words)</option>
            </select>
            
            <label class="label mt-4">
              <span class="label-text">Tone of Voice</span>
            </label>
            <select id="repurposeTone" class="select select-bordered w-full">
              <option value="professional">Professional</option>
              <option value="casual">Casual</option>
              <option value="humorous">Humorous</option>
            </select>
            
            <button id="generateRepurposeBtn" class="btn btn-primary mt-6">Generate Content</button>
          </div>
          <div class="modal-action">
            <label for="repurpose-modal" class="btn">Close</label>
          </div>
        </div>
      </div>
      <%- include('footer') %>
    </div>
    
    <!-- Clerk Initialization Helper -->
    <script>
      // Add event listener for when Clerk is loaded
      document.addEventListener('DOMContentLoaded', function() {
        console.log("[DEBUG] DOMContentLoaded - checking Clerk status");
        
        // Create global variables to track Clerk's state
        window.__clerkComponentsReady = false;
        
        // Check if Clerk is already initialized
        if (window.Clerk && typeof window.Clerk.load === 'function') {
          console.log("[DEBUG] Clerk object already available");
          initializeClerk();
        } else {
          console.log("[DEBUG] Waiting for Clerk to load");
          // Wait for Clerk to be available
          const checkInterval = setInterval(() => {
            if (window.Clerk && typeof window.Clerk.load === 'function') {
              clearInterval(checkInterval);
              console.log("[DEBUG] Clerk object now available");
              initializeClerk();
            }
          }, 100);
          
          // Fallback if Clerk doesn't load within 3 seconds
          setTimeout(() => {
            if (!(window.Clerk && typeof window.Clerk.load === 'function')) {
              console.log("[DEBUG] Clerk failed to load after timeout");
              clearInterval(checkInterval);
              // Dispatch events to enable buttons anyway
              document.dispatchEvent(new CustomEvent('clerk-ready', { 
                detail: { success: false, error: "Clerk failed to load" } 
              }));
            }
          }, 3000);
        }
      });
      
      // Function to initialize Clerk
      function initializeClerk() {
        try {
          console.log("[DEBUG] Initializing Clerk with key:", window.Clerk.publishableKey);
          
          // Ensure the publishable key is set
          if (!window.Clerk.publishableKey && window.CLERK_KEY) {
            console.log("[DEBUG] Setting missing publishable key");
            window.Clerk.publishableKey = window.CLERK_KEY;
          }
          
          // Call Clerk.load() to initialize components
          window.Clerk.load({
            // Explicitly pass the publishable key
            publishableKey: window.Clerk.publishableKey || window.CLERK_KEY,
            afterLoaded: (clerk) => {
              console.log("[DEBUG] Clerk components loaded successfully");
              // Set global flag for component readiness
              window.__clerkComponentsReady = true;
              
              // Check if user is already signed in
              if (clerk.user) {
                console.log("[DEBUG] User is already signed in:", clerk.user.fullName || clerk.user.primaryEmailAddress);
                console.log("[DEBUG] User image URL:", clerk.user.imageUrl);
              } else {
                console.log("[DEBUG] No user is currently signed in");
              }
              
              // Dispatch event to notify app.js
              document.dispatchEvent(new CustomEvent('clerk-components-ready', { 
                detail: { success: true, user: clerk.user } 
              }));
              
              // Dispatch ready event
              document.dispatchEvent(new CustomEvent('clerk-ready', { 
                detail: { success: true, user: clerk.user } 
              }));
              
              // Set up auth state change listeners to refresh usage count
              clerk.addListener(({ user }) => {
                console.log('Auth state changed:', user ? 'User logged in' : 'User logged out');
                
                // Refresh usage count when auth state changes
                if (typeof updateUsageCount === 'function') {
                  updateUsageCount();
                }
              });
            }
          });
        } catch (error) {
          console.error("[DEBUG] Error initializing Clerk:", error);
          // Dispatch events to enable buttons anyway
          document.dispatchEvent(new CustomEvent('clerk-ready', { 
            detail: { success: false, error: error.message } 
          }));
        }
      }
    </script>
    
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script src="/app.js"></script>
    
    <!-- Loading overlay for AI generation -->
    <div id="loadingOverlay" class="loading-overlay hidden">
      <div class="loading-overlay-content">
        <span class="loading loading-spinner loading-lg"></span>
        <progress class="progress w-56 my-4" value="100" max="100"></progress>
        <p id="loadingMessage" class="text-lg font-medium">Generating AI content...</p>
        <p class="text-sm text-gray-500">Please wait, this may take a few moments</p>
      </div>
    </div>
    
    <!-- Clerk Modal Container -->
    <div id="clerk-modal-container"></div>
    
    <!-- Clerk fix script -->
    <script src="/clerk-fix.js"></script>
  </body>
</html>
