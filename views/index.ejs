<!DOCTYPE html>
<html lang="en">
  <%- include('header') %>
  <body>
    <div class="container">
      <%- include('navbar') %>
      <div class="page-container">
        <h1 class="text-center mb-8 custom-h1">Transcribe YouTube Videos</h1>
        <div class="mb-8 input-container">
          <input
            id="urlInput"
            type="text"
            placeholder="Enter YouTube URL"
            class="input input-bordered w-full"
          />
          <button
          id="transcribeBtn"
          class="btn bg-[#6366f1] text-white w-full sm:w-auto flex items-center justify-center px-8 py-2"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-5 w-5 mr-2"
            fill="currentColor"
            viewBox="0 0 24 24"
            stroke="none"
          >
            <path
              d="m18.813,10c.309,0,.601-.143.79-.387s.255-.562.179-.861c-.311-1.217-.945-2.329-1.833-3.217l-3.485-3.485c-1.322-1.322-3.08-2.05-4.95-2.05h-4.515C2.243,0,0,2.243,0,5v14c0,2.757,2.243,5,5,5h3c.552,0,1-.448,1-1s-.448-1-1-1h-3c-1.654,0-3-1.346-3-3V5c0-1.654,1.346-3,3-3h4.515c.163,0,.325.008.485.023v4.977c0,1.654,1.346,3,3,3h5.813Zm-6.813-3V2.659c.379.218.732.488,1.05.806l3.485,3.485c.314.314.583.668.803,1.05h-4.338c-.551,0-1-.449-1-1Zm11.122,4.879c-1.134-1.134-3.11-1.134-4.243,0l-6.707,6.707c-.755.755-1.172,1.76-1.172,2.829v1.586c0,.552.448,1,1,1h1.586c1.069,0,2.073-.417,2.828-1.172l6.707-6.707c.567-.567.879-1.32.879-2.122s-.312-1.555-.878-2.121Zm-1.415,2.828l-6.708,6.707c-.377.378-.879.586-1.414.586h-.586v-.586c0-.534.208-1.036.586-1.414l6.708-6.707c.377-.378,1.036-.378,1.414,0,.189.188.293.439.293.707s-.104.518-.293.707Z"
            />
          </svg>
          <span id="buttonText">Transcribe</span>
        </button>
        
                   
        </div>
        <div id="results" class="hidden">
          <img
            id="thumbnail"
            src=""
            alt="YouTube Video Thumbnail"
            class="mb-8 mx-auto"
          />
          <div class="text-center button-container">
            <button id="copyTranscriptionBtn" class="btn btn-secondary">
              Copy Transcript
            </button>
            <button id="downloadTxtBtn" class="btn btn-outline btn-secondary">
              Download TXT
            </button>
            <button id="downloadCsvBtn" class="btn btn-outline btn-secondary">
              Download CSV
            </button>
          </div>
          <h2 class="text-xl font-bold mb-4 py-2 vertical-center">
            Video Transcript
          </h2>
          <div class="transcript-container">
            <div id="transcription" class="mb-8 prose text-lg"></div>
          </div>
        </div>
      </div>
      <dialog id="language-modal" class="modal">
        <div class="modal-box">
          <form method="dialog">
            <button
              class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2"
              id="close-modal-btn"
            >
              âœ•
            </button>
          </form>
          <h3 class="font-bold text-lg">Select Language</h3>
          <div
            id="language-options"
            class="language-options flex flex-col items-stretch"
          ></div>
        </div>
      </dialog>
      <%- include('footer') %>
    </div>
    
    <!-- First, load the Clerk script -->
    <script src="https://cdn.jsdelivr.net/npm/@clerk/clerk-js@latest/dist/clerk.browser.js"></script>
    
    <script>
        // Make the key available globally as it was before
        window.CLERK_PUBLISHABLE_KEY = '<%= clerkPublishableKey %>';
        
        // Store the key in a variable
        const clerkKey = "<%= clerkPublishableKey %>";
        console.log("Clerk key from server:", clerkKey);
        
        // Create a global variable to track Clerk's state
        window.__clerkReady = false;
        
        document.addEventListener("DOMContentLoaded", async function() {
            // First, check if the key is valid
            if (!clerkKey || clerkKey.trim() === '') {
                console.error("Clerk publishable key is empty or invalid");
                document.dispatchEvent(new CustomEvent('clerk-ready', { detail: { success: false } }));
                return;
            }
            
            try {
                // Initialize Clerk using the recommended pattern
                console.log("Initializing Clerk with key:", clerkKey);
                
                // Create a new Clerk instance
                const clerk = new Clerk(clerkKey);
                
                // Load Clerk
                await clerk.load();
                
                // Set the global Clerk object
                window.Clerk = clerk;
                
                console.log("Clerk initialized successfully");
                window.__clerkReady = true;
                
                // Dispatch event to notify app.js
                document.dispatchEvent(new CustomEvent('clerk-ready', { 
                    detail: { success: true } 
                }));
            } catch (error) {
                console.error("Error initializing Clerk:", error);
                document.dispatchEvent(new CustomEvent('clerk-ready', { 
                    detail: { success: false, error: error.message } 
                }));
            }
        });
    </script>
    
    <script src="/app.js"></script>
  </body>
</html>
